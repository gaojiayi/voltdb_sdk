package com.gaojy.cache.voltdb.core.dbsource;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Map;

import com.gaojy.cache.voltdb.core.dbsource.mapping.ResultSetToAppBean;
import com.gaojy.cache.voltdb.core.dbsource.mapping.ResultSetToBean;
import com.gaojy.cache.voltdb.core.dbsource.opt.IVoltdbDao;


/**
 * @Title: DAO层，与业务交互的
 * @Description: 暂时提供了以下接口，后面根据需要再改造
 * @Author: gaojy
 * @Version: 1.0
 */
public class VoltdbDaoImpl extends BaseOpt implements IVoltdbDao
{
	private String dbType = null;

	/**
	 * 构造函数
	 */
	public VoltdbDaoImpl()
	{
	}

	/**
	 * 构造函数
	 * 
	 * @param dbType
	 *            类型库类型
	 */
	public VoltdbDaoImpl(String dbType)
	{
		this.dbType = dbType;
	}

	/*
	 * (non-Javadoc)
	 * @see com.gaojy.cache.voltdb.core.dbsource.BaseOpt#getDBType()
	 */
	@Override
	String getDBType()
	{
		return dbType;
	}

	/*
	 * (non-Javadoc)
	 * @see com.gaojy.cache.voltdb.core.dbsource.opt.IVoltdbDao#executeQuery(java.lang.String)
	 */
	@Override
	public ResultSet executeQuery(String sql) throws SQLException
	{
		Statement statement = createStatement();

		return statement.executeQuery(sql);
	}

	/*
	 * (non-Javadoc)
	 * @see com.gaojy.cache.voltdb.core.dbsource.opt.IVoltdbDao#executeUpdate(java.lang.String)
	 */
	@Override
	public int executeUpdate(String sql) throws SQLException
	{
		Statement statement = createStatement();

		return statement.executeUpdate(sql);
	}

	/*
	 * (non-Javadoc)
	 * @see com.gaojy.cache.voltdb.core.dbsource.opt.IVoltdbDao#executeUpdate(java.lang.String, int)
	 */
	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException
	{
		Statement statement = createStatement();

		return statement.executeUpdate(sql, autoGeneratedKeys);
	}

	/*
	 * (non-Javadoc)
	 * @see com.gaojy.cache.voltdb.core.dbsource.opt.IVoltdbDao#executeUpdate(java.lang.String, int[])
	 */
	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException
	{
		Statement statement = createStatement();

		return statement.executeUpdate(sql, columnIndexes);
	}

	/*
	 * (non-Javadoc)
	 * @see com.gaojy.cache.voltdb.core.dbsource.opt.IVoltdbDao#executeUpdate(java.lang.String, java.lang.String[])
	 */
	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException
	{
		Statement statement = createStatement();

		return statement.executeUpdate(sql, columnNames);
	}

	/*
	 * (non-Javadoc)
	 * @see com.gaojy.cache.voltdb.core.dbsource.opt.IVoltdbDao#executeUpdate(java.lang.String, java.lang.Object[])
	 */
	@Override
	public int executeUpdate(String sql, Object... parameters) throws SQLException
	{
		PreparedStatement pstatement = createPreparedStatement(sql);

		int i = 1;
		for (Object obj : parameters)
		{
			pstatement.setObject(i, obj);
			i++;
		}

		return pstatement.executeUpdate();
	}

	/*
	 * (non-Javadoc)
	 * @see com.gaojy.cache.voltdb.core.dbsource.opt.IVoltdbDao#executeQuery(java.lang.String, java.lang.Class)
	 */
	@Override
	public List<?> executeQuery(String sql, Class<?> obj) throws SQLException
	{
		ResultSetToBean<Class<?>> mapp = new ResultSetToBean<Class<?>>();

		return mapp.mapRersultSetToObject(executeQuery(sql), obj);
	}

	/*
	 * (non-Javadoc)
	 * @see com.gaojy.cache.voltdb.core.dbsource.opt.IVoltdbDao#executeQuery(java.lang.String, java.lang.Object[])
	 */
	@Override
	public ResultSet executeQuery(String sql, Object... parameters) throws SQLException
	{
		PreparedStatement pstatement = createPreparedStatement(sql);
		int i = 1;
		for (Object obj : parameters)
		{
			pstatement.setObject(i, obj);
			i++;
		}
		return pstatement.executeQuery();
	}

	/*
	 * (non-Javadoc)
	 * @see com.gaojy.cache.voltdb.core.dbsource.opt.IVoltdbDao#executeQuery(java.lang.String, java.util.Map)
	 */
	@Override
	public ResultSet executeQuery(String sql, Map<String, Object> obj) throws SQLException
	{
		PreparedStatement pstatement = setStatement(sql, obj);
		return pstatement.executeQuery();
	}

	/**
	 * 坐SQL中，获取关键字；并格式化成标准的SQL
	 * @param sql 源SQL
	 * @param obj 参数
	 * @return PreparedStatement
	 * @throws SQLException
	 */
	private PreparedStatement setStatement(String sql, Map<String, Object> obj) throws SQLException
	{
		StringBuffer sb = new StringBuffer();
		int index = sql.indexOf(":");
		String[] array = null;
		if (index > -1)
		{
			format(sql.substring(index + 1), sb);

			array = sb.toString().split(",");

			//将占位符，替换成PreparedStatement 认识的占位符
			for (String a : array)
			{
				sql = sql.replace(":" + a, " ?");
			}
		}

		PreparedStatement pstatement = createPreparedStatement(sql);

		if (null != array)
		{
			int i = 1;
			for (String a : array)
			{
				pstatement.setObject(i, obj.get(a));
				i++;
			}
		}
		return pstatement;
	}

	/**
	 * 如：SQL原型：select * from dual where id=:id and name=:name;
	 * <br>将":id,:name"筛选出来
	 * @param str sql 原型
	 * @param sb 将:id 点位符筛选出来，存储在buffer中。
	 */
	private static void format(String str, StringBuffer sb)
	{
		for (char s : str.toCharArray())
		{
			if (s != ' ')
			{
				sb.append(s);
			}
			else
			{
				int index = str.indexOf(":");
				if (index > -1)
				{
					str = str.substring(index + 1);
					sb.append(",");
					format(str, sb);
				}
				break;
			}
		}
	}

	/* (non-Javadoc)
	 * @see com.gaojy.cache.voltdb.core.dbsource.opt.IVoltdbDao#executeUpdate(java.lang.String, java.util.Map)
	 */
	@Override
	public int executeUpdate(String sql, Map<String, Object> obj) throws SQLException
	{
		PreparedStatement pstatement = setStatement(sql, obj);
		
		return pstatement.executeUpdate();
	}
	
	public <T> List<T> getAPPBeans(Class<T> clazz, String sql,Object... parameters) throws Exception
	{
		List<T> beans = null;;
		try
		{
			ResultSet rs = executeQuery(sql, parameters);
			beans = ResultSetToAppBean.getBeans(clazz, rs);
		}
		catch (Exception e)
		{
			throw e;
		}
		finally
		{
			close();
		}
		 
		return beans;
	}

	
	public <T> T getAPPBean(Class<T> clazz, String sql,Object... parameters) throws Exception
	{
		T bean = null;
		try
		{
			ResultSet rs = executeQuery(sql, parameters);
			bean = ResultSetToAppBean.getBean(clazz, rs);
		}
		catch (Exception e)
		{
			throw e;
		}
		finally
		{
			close();
		}
		return bean;
	}
}
